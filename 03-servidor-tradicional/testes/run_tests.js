#!/usr/bin/env node

/**
 * üöÄ Script de Execu√ß√£o de Testes de Estresse e Seguran√ßa
 * 
 * Uso:
 *   node run_tests.js                    # Teste padr√£o (m√©dio)
 *   node run_tests.js light             # Teste leve
 *   node run_tests.js heavy             # Teste pesado
 *   node run_tests.js security          # Teste de seguran√ßa
 *   node run_tests.js performance       # Teste de performance
 *   node run_tests.js --help            # Ajuda
 */

const { runSecurityStressTest } = require('./estresse_seguranca');
const { CONFIGURACOES } = require('./config_testes');

// Fun√ß√£o para exibir ajuda
function showHelp() {
  console.log(`
üß™ Testes de Estresse e Seguran√ßa - Task Management API

üìã USO:
  node run_tests.js [perfil] [op√ß√µes]

üìä PERFIS DISPON√çVEIS:
  light        üü¢ Teste b√°sico para desenvolvimento (10 usu√°rios, 30s)
  medium       üü° Teste intermedi√°rio para staging (25 usu√°rios, 1min)
  heavy        üî¥ Teste intensivo para produ√ß√£o (50 usu√°rios, 2min)
  security     üõ°Ô∏è  Foco em vulnerabilidades e ataques
  performance  üìä Foco em performance e escalabilidade

‚öôÔ∏è  OP√á√ïES:
  --help       Exibir esta ajuda
  --config     Mostrar configura√ß√µes do perfil selecionado
  --monitor    Ativar monitoramento em tempo real
  --report     Gerar relat√≥rio detalhado

üìù EXEMPLOS:
  node run_tests.js light              # Teste leve
  node run_tests.js heavy --monitor    # Teste pesado com monitoramento
  node run_tests.js security --report  # Teste de seguran√ßa com relat√≥rio

‚ö†Ô∏è  AVISOS:
  - Certifique-se de que a API est√° rodando em http://localhost:3000
  - Testes pesados podem impactar o sistema
  - Use apenas em ambientes de teste
  - Monitore o sistema durante os testes

üîß CONFIGURA√á√ÉO:
  Edite config_testes.js para personalizar os testes
  `);
}

// Fun√ß√£o para exibir configura√ß√µes
function showConfig(profile) {
  const config = CONFIGURACOES[profile];
  if (!config) {
    console.error(`‚ùå Perfil '${profile}' n√£o encontrado`);
    return;
  }

  console.log(`
‚öôÔ∏è  CONFIGURA√á√ÉO DO PERFIL: ${config.name.toUpperCase()}
${'='.repeat(50)}
üìù Descri√ß√£o: ${config.description}
‚è±Ô∏è  Dura√ß√£o: ${config.duration / 1000}s
üë• Usu√°rios simult√¢neos: ${config.concurrentUsers}
üì® Requisi√ß√µes por usu√°rio: ${config.requestsPerUser}
üéØ Intensidade de ataque: ${config.attackIntensity}
üõ°Ô∏è  Testes de seguran√ßa: ${config.securityTests.join(', ')}
üîí Testes de rate limiting: ${config.rateLimitTests ? 'Sim' : 'N√£o'}
üìä Testes de performance: ${config.performanceTests ? 'Sim' : 'N√£o'}
üåä Simula√ß√£o de DDoS: ${config.ddosSimulation ? 'Sim' : 'N√£o'}
  `);
}

// Fun√ß√£o principal
async function main() {
  const args = process.argv.slice(2);
  const profile = args[0] || 'medium';
  const options = args.slice(1);

  // Verificar se √© uma solicita√ß√£o de ajuda
  if (options.includes('--help') || profile === '--help') {
    showHelp();
    return;
  }

  // Verificar se √© uma solicita√ß√£o de configura√ß√£o
  if (options.includes('--config')) {
    showConfig(profile);
    return;
  }

  // Verificar se o perfil existe
  if (!CONFIGURACOES[profile]) {
    console.error(`‚ùå Perfil '${profile}' n√£o encontrado`);
    console.log('üìã Perfis dispon√≠veis:', Object.keys(CONFIGURACOES).join(', '));
    console.log('üí° Use --help para mais informa√ß√µes');
    return;
  }

  // Exibir informa√ß√µes do teste
  const config = CONFIGURACOES[profile];
  console.log(`
üöÄ INICIANDO TESTE: ${config.name.toUpperCase()}
${'='.repeat(50)}
üìù ${config.description}
‚è±Ô∏è  Dura√ß√£o: ${config.duration / 1000}s
üë• Usu√°rios simult√¢neos: ${config.concurrentUsers}
üì® Requisi√ß√µes por usu√°rio: ${config.requestsPerUser}
üéØ Intensidade de ataque: ${config.attackIntensity}
üõ°Ô∏è  Testes de seguran√ßa: ${config.securityTests.join(', ')}
üîí Testes de rate limiting: ${config.rateLimitTests ? 'Sim' : 'N√£o'}
üìä Testes de performance: ${config.performanceTests ? 'Sim' : 'N√£o'}
üåä Simula√ß√£o de DDoS: ${config.ddosSimulation ? 'Sim' : 'N√£o'}

‚ö†Ô∏è  AVISOS:
  - Certifique-se de que a API est√° rodando
  - Este teste pode impactar o sistema
  - Use apenas em ambientes de teste
  - Pressione Ctrl+C para interromper

‚è≥ Iniciando em 5 segundos...
  `);

  // Aguardar 5 segundos para permitir cancelamento
  await new Promise(resolve => {
    let countdown = 5;
    const interval = setInterval(() => {
      process.stdout.write(`\r‚è≥ Iniciando em ${countdown} segundos...`);
      countdown--;
      if (countdown < 0) {
        clearInterval(interval);
        process.stdout.write('\rüöÄ Iniciando teste...\n\n');
        resolve();
      }
    }, 1000);
  });

  try {
    // Executar o teste
    await runSecurityStressTest();

    console.log(`
‚úÖ TESTE CONCLU√çDO COM SUCESSO!
${'='.repeat(50)}
üìä Verifique o relat√≥rio gerado para detalhes completos
üí° Use as recomenda√ß√µes para melhorar a seguran√ßa e performance
üîÑ Execute outros perfis para testes adicionais
    `);

  } catch (error) {
    console.error(`
‚ùå ERRO DURANTE O TESTE
${'='.repeat(50)}
üîç Erro: ${error.message}
üìù Stack: ${error.stack}
üí° Verifique se a API est√° rodando e tente novamente
    `);
    process.exit(1);
  }
}

// Capturar Ctrl+C para interrup√ß√£o graciosa
process.on('SIGINT', () => {
  console.log('\n\n‚ö†Ô∏è  Teste interrompido pelo usu√°rio');
  console.log('üîÑ Para executar novamente, use: node run_tests.js [perfil]');
  process.exit(0);
});

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main };
